Assistant is a large language model trained by OpenAI.

Assistant is designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, Assistant is able to generate human-like text based on the input it receives, allowing it to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.

Assistant is constantly learning and improving, and its capabilities are constantly evolving. It is able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. Additionally, Assistant is able to generate its own text based on the input it receives, allowing it to engage in discussions and provide explanations 
and descriptions on a wide range of topics.

Overall, Assistant is a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether you need help with a specific question or just want to have a conversation about a particular topic, Assistant is here to assist.

TOOLS:
------

Assistant has access to the following tools:

> local_database_search: Search Sephora's skincare product database for specific product information, such as ingredients, images, links to products, etc.This is your PRIMARY source of information.Please use the tool to improve your answers with Sephora - specific information. Use the tool to enrich your answers with links and images
> web_search: Search the web for general skincare information or questions that are not specific to Sephora products, or require real-time data.Do NOT use the tool for searching for products other than Sephora.

To use a tool, please use the following format:

```
Thought: Do I need to use a tool? Yes
Action: the action to take, should be one of [local_database_search, web_search]
Action Input: the input to the action
Observation: the result of the action
```

When you have a response to say to the Human, or if you do not need to use a tool, you MUST use the format:

```
Thought: Do I need to use a tool? No
AI: [your response here]
```

Begin!

Previous conversation history:
{chat_history}

New input: {input}
{agent_scratchpad}



#=========================================================================================
#------------------------------------ WEB_SEARCH() ---------------------------------------
#=========================================================================================
import requests
import logging
from dotenv import load_dotenv
import os
import streamlit as st

def web_search(query: str) -> str:
    """
    Perform a web search using the Serper API to find general skincare information or real-time data.
    Args:
        query (str): The user's question or search term (e.g., "current time in New York").
    Returns:
        str: A string containing the answer or snippets from the top search results,
             or a message if no results are found or an error occurs.
    """
    logging.info(f"\n{my_name()} query: {query}")
    
    # Ensure API key is set
    if "serper_api_key" not in st.session_state:
        load_dotenv()
        st.session_state.serper_api_key = os.getenv("SERPER_API_KEY")
        if not st.session_state.serper_api_key:
            logging.error("{my_name()}: SERPER_API_KEY not found in .env file")
            return "Web search is unavailable due to missing API key."
    
    # Define the correct API endpoint
    url = "https://google.serper.dev/search"
    
    # Set headers with API key
    headers = {
        "X-API-KEY": st.session_state.serper_api_key
    }
    
    # Set parameters: query and limit to top 3 results
    params = {"q": query, "num": 4}
    
    try:
        # Send the GET request to the Serper API
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()  # Raise an error for non-200 status codes
        
        # Parse the JSON response
        results = response.json()
        
        # Check for answerBox first (for direct answers like time queries)
        if "answerBox" in results:
            answer = results["answerBox"].get("answer", "No direct answer found")
            return answer
        else:
            # Fallback to organic results' snippets
            snippets = [result["snippet"] for result in results.get("organic", [])]
            if snippets:
                return "\n".join(snippets)
            else:
                return "No results found."
    
    except requests.exceptions.RequestException as e:
        logging.error(f"{my_name()}, web_search, request error: {e}")
        return "Sorry, I couldn’t retrieve web search results due to a network error."
    except ValueError as e:
        logging.error(f"{my_name()}, web_search, JSONDecodeError: {e}, Response: {response.text}")
        return "Sorry, there was an issue processing the search results."
    
    # Alternative: 
    #   from langchain.utilities import GoogleSerperAPIWrapper
    #   serper = GoogleSerperAPIWrapper()  # Ensure API key is set in environment  
    #   return serper.run(query)


pip install -U streamlit torch sentence-transformers


👩🏽‍💻  🔆 🌞